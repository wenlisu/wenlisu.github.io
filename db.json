{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/index/logo.jpg","path":"images/index/logo.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"3ca27011dc6cc4fa1af026985b39aad763709cdf","modified":1495800167000},{"_id":"source/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1495800167000},{"_id":"source/_posts/.DS_Store","hash":"89ef19e19699a77ecc737919cba39512923cf264","modified":1495800167000},{"_id":"source/_posts/HEXO+Github，搭建属于自己的博客.md","hash":"6010584a9dd424129660362eb49d508fca5cdd04","modified":1495805497000},{"_id":"source/_posts/微信小程序.md","hash":"4ccccf3a6655499fe7f35139d8ba58a9ae81fded","modified":1495800167000},{"_id":"source/about/index.md","hash":"85e67b59cfd9a87ce8f9161a3efbf09a49ae1612","modified":1495800167000},{"_id":"source/categories/index.md","hash":"9efc9e76c06d39ba2f6dcd1a07ceb969cbbcba61","modified":1495800167000},{"_id":"source/images/.DS_Store","hash":"a3d5653f077520f2a982b6c267236cac9efb32cd","modified":1495800167000},{"_id":"source/images/index.md","hash":"73635c4fe1c61678e5dfa9fb59b2b5a2c999f167","modified":1495800167000},{"_id":"source/images/index/.DS_Store","hash":"b283b5bb022205e9dad8f87195472d2a9ae717b8","modified":1495800167000},{"_id":"source/images/index/logo.jpg","hash":"ad030e6ffda6dcb78be6a4c9db5fc3ed5a8c2ba8","modified":1495800167000},{"_id":"public/baidusitemap.xml","hash":"fd641c7d2f060d36b95a6ae17ec5a8a733f021e8","modified":1495820774937},{"_id":"public/sitemap.xml","hash":"7493abdcb7ed4d1dc9c26102eadd252084ed9cf8","modified":1495820774937},{"_id":"public/404.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495820774943},{"_id":"public/about/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495820774943},{"_id":"public/categories/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495820774943},{"_id":"public/images/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495820774943},{"_id":"public/2017/05/22/微信小程序/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495820774944},{"_id":"public/2017/05/18/HEXO+Github，搭建属于自己的博客/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495820774944},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495820774944},{"_id":"public/archives/2017/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495820774944},{"_id":"public/archives/2017/05/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495820774944},{"_id":"public/categories/手册/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495820774944},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495820774944},{"_id":"public/images/index/logo.jpg","hash":"ad030e6ffda6dcb78be6a4c9db5fc3ed5a8c2ba8","modified":1495820774949}],"Category":[{"name":"手册","_id":"cj3652ggi00052hdhtsxagyb1"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2017-05-26T12:02:47.000Z","updated":"2017-05-26T12:02:47.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cj3652gfk00002hdh4gumhval","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"关于","date":"2017-05-16T07:56:31.000Z","type":"user","_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2017-05-16 15:56:31\ntype: \"user\"\n---\n","updated":"2017-05-26T12:02:47.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj3652gg600022hdhj6leeshb","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"","date":"2017-05-16T07:29:06.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: \ndate: 2017-05-16 15:29:06\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-05-26T12:02:47.000Z","path":"categories/index.html","layout":"page","_id":"cj3652ggd00042hdhxfrrqgmm","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"记录生活","date":"2017-05-16T07:27:06.000Z","type":"image","_content":"<ul class=\"img-box-ul clearfix\">\n    <li>![](/images/index/logo.jpg)</li>\n    <li>![](/images/index/logo.jpg)</li>\n    <li>![](/images/index/logo.jpg)</li>\n</ul>\n","source":"images/index.md","raw":"---\ntitle: 记录生活\ndate: 2017-05-16 15:27:06\ntype: \"image\"\n---\n<ul class=\"img-box-ul clearfix\">\n    <li>![](/images/index/logo.jpg)</li>\n    <li>![](/images/index/logo.jpg)</li>\n    <li>![](/images/index/logo.jpg)</li>\n</ul>\n","updated":"2017-05-26T12:02:47.000Z","path":"images/index.html","comments":1,"layout":"page","_id":"cj3652ggy00092hdh2ntqzt2q","content":"<ul class=\"img-box-ul clearfix\"><br>    <li><img src=\"/images/index/logo.jpg\" alt=\"\"></li><br>    <li><img src=\"/images/index/logo.jpg\" alt=\"\"></li><br>    <li><img src=\"/images/index/logo.jpg\" alt=\"\"></li><br></ul>\n","site":{"data":{}},"excerpt":"","more":"<ul class=\"img-box-ul clearfix\"><br>    <li><img src=\"/images/index/logo.jpg\" alt=\"\"></li><br>    <li><img src=\"/images/index/logo.jpg\" alt=\"\"></li><br>    <li><img src=\"/images/index/logo.jpg\" alt=\"\"></li><br></ul>\n"}],"Post":[{"title":"HEXO+Github,搭建属于自己的博客","date":"2017-05-18T02:08:21.000Z","_content":"前言\n=============\n\n一直都想拥有个属于自己的博客，之前买过域名做过静态展示类型的个人网站，苦于那时的自己对数据库操作不怎么了解，所以没有将其继续发展成动态网站并且维护下去，那时觉得自己需要搭建个动态博客，应该不只要会前端，后台至少也应该要懂些。  \n直到偶然的机会让我遇到了[Hexo](https://hexo.io)。   \nHexo+Github的结合让谁都能轻轻松松搭建起属于自己的博客，相当COOL，相信不久的将来，Hexo就会流行起来。   \nHexo出自于台湾大学生[tommy351](http://twitter.com/tommy351)之手，基于node.js环境的静态博客程序，Hexo生成的静态网页可以直接放到GitHub Pages、BAE、SAE等平台上。大概生活中所有的创新都来源于对现状的不满意，[Hexo 颯爽登場！](https://zespia.tw/blog/2012/10/11/hexo-debut/)一篇来自[tommy351](http://twitter.com/tommy351)对[Octopress](http://octopress.org/)的吐槽。\n\n因为我Github的username为wenlisu，所以以下事例以wenlisu代替，宝宝们要将其换成自己Github的的username。\n\n 环境准备\n=============\n\n## 安装node\n\n到[Node.js](https://nodejs.org/en)官网下载相应平台的最新版本，一路安装即可，比较喜欢折腾的同学可以通过安装[nvm](https://github.com/creationix/nvm)或者n`n是Node的一个模块`来安装或管理node版本，体验也是相当不错的，我是用的nvm`^o^推荐`。\n\n## 安装Git\n\n目前市面上也有图形化界面版，例如[SmartGit](http://www.syntevo.com/smartgit/download)，挺方便直观的。  \n如果想要看起来高大上点的话，可以选择`shell`，可以在上面输入要执行的命令。首先，你可以试着输入git，看看系统有没有安装Git。\n\n```\n$ git\nThe program 'git' is currently not installed. You can install it by typing:\nsudo apt-get install git\n```\n\n假如没有安装，返回的信息提示通过一条`sudo apt-get install git`就可以直接完成Git的安装，非常简单。\n\n Github\n=============\n\n```\n* 首先注册一个『GitHub』帐号。\n* 建立与你用户名对应的仓库，仓库名为『your_user_name.github.io』。\n* 添加SSH公钥到『Account settings -> SSH Keys -> Add SSH Key』。 \n```\n建立与你用户名对应的仓库：\n\n![](http://ww3.sinaimg.cn/large/006tKfTcgy1ffplg4xs2kj30xp0kb40y.jpg)\n\n不知道宝宝们有没有遇到过这种情况，新建仓库后，在命令行中按照所给提示：输入以下命令时，会报错如下：\n\n```\nWarning: Permanently added the RSA host key for IP address '192.30.252.130' to the list of known hosts.\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n```\n\n所以主要讲第三步，怎么给Github添加SSH-Key，宝宝们，我是一路踩着坑过来的`( ´▽｀)`。\n\n## 首先设置你的用户名密码：\n\n```\n$ git config --global user.email \"415357008@qq.com\"\n$ git config --global user.name \"wenlisu\"\n```\n## 生成密钥：\n\n```\n$ ssh-keygen -t rsa -C \"415357008@qq.com\"\n```\n\n输入文件路径,一路默认`<Enter>`,当提示`Enter passphrase`是让你输入密码，假如输入，以后每提交一次就需要输入一次密码，反正我是不可能输密码的，每次都需要，多麻烦啊。\n\n```\nwebdevs-MacBook-Pro:wenlisu.github.io webdev$ ssh-keygen -t rsa -C \"415357008@qq.com\"\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/webdev/.ssh/id_rsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \n```\n\n## 将SSH密钥复制到剪贴板。\n\n```\n$ pbcopy < ~/.ssh/id_rsa.pub\n```\n\n接下来去到Github，点击`settings`。\n\n![](http://ww4.sinaimg.cn/large/006tKfTcgy1ffpmwc2yyjj30vd0jqdlr.jpg)\n\n按照以下操作给SSh key添加title（例如Personal MacBook）， 再将剪贴板的内容粘贴到key中，点击`Add SSH key按钮`。\n\n![](http://ww4.sinaimg.cn/large/006tKfTcgy1ffpmx1sdisj30uk0e3taf.jpg)\n\n至此，Github中的SSH已添加完毕，具体疑问可到[Github](https://help.github.com/categories/authenticating-to-github/)中查询。\n\n## 测试一下该SSH key\n```\n$ ssh -T git@github.com\n```\n\n当你输入以上代码时，会有一段警告代码，如：\n\n```\nThe authenticity of host 'github.com (207.97.227.239)' can't be established.\n# RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\n# Are you sure you want to continue connecting (yes/no)?\n```\n\n这是正常的，你输入 yes 回车既可。如果你创建 SSH key 的时候设置了密码，接下来就会提示你输入密码，如：\n\n```\nEnter passphrase for key '/c/Users/Administrator/.ssh/id_rsa':\n```\n\n密码正确后你会看到下面这段话，如：\n\n```\nHi username! You've successfully authenticated, but GitHub does not\n# provide shell access.\n```\n\n如果用户名是正确的,你已经成功设置SSH密钥。如果你看到 “access denied” ，则表示拒绝访问，那么你就需要使用 https 去访问，而不是 SSH 。\n\n接着下来安装Hexo。\n\n Hexo\n=============\n\n前提是必须先安装 [Node.js](https://nodejs.org/en)，在安装node.js过程中不懂的尽情问Google吧。   \n\n```\n$ npm install hexo -g\n```\n\n## 初始化\n\n如果制定 `<folder>`，便会在目前的文件夹下建立一个名为 `<folder>` 的新文件，否则会在目前文件下初始化。\n\n```\n$ hexo init <folder>\n$ cd <folder>\n```\n\n## 安装依赖包\n\n```\n$ npm install\n```\n\n## 生产静态文件 && 服务\n\n```\n$ hexo generate || hexo g \n$ hexo server   || hexo s \n```\n\n启动本地服务器，默认情况下，打开`http://localhost:4000/`。  \n到目前状态下，个人博客雏形基本已经完成，接下来，将如何把Hexo生成的静态网页内容目录放到Github上，打开博客根目录下的_config.yml在最下方加上。\n\n```\ndeploy:\n     type: git\n     repo: https://github.com/wenlisu/wenlisu.github.io.git\n     branch: master\n```\n\n每一步的部署，按照以下三个步骤进行\n\n```\n$ hexo clean\n$ hexo generate\n$ hexo deploy\n```\n当执行`hexo deploy`命令部署到GitHub上的内容目录啦，这时候打开`https://wenlisu.github.io`就将是自己的博客地址啦，是不是很方便快捷啊，宝宝们赶紧行动起来吧！","source":"_posts/HEXO+Github，搭建属于自己的博客.md","raw":"title: 'HEXO+Github,搭建属于自己的博客'\ncategories: 手册\ndate: 2017-05-18 10:08:21\n---\n前言\n=============\n\n一直都想拥有个属于自己的博客，之前买过域名做过静态展示类型的个人网站，苦于那时的自己对数据库操作不怎么了解，所以没有将其继续发展成动态网站并且维护下去，那时觉得自己需要搭建个动态博客，应该不只要会前端，后台至少也应该要懂些。  \n直到偶然的机会让我遇到了[Hexo](https://hexo.io)。   \nHexo+Github的结合让谁都能轻轻松松搭建起属于自己的博客，相当COOL，相信不久的将来，Hexo就会流行起来。   \nHexo出自于台湾大学生[tommy351](http://twitter.com/tommy351)之手，基于node.js环境的静态博客程序，Hexo生成的静态网页可以直接放到GitHub Pages、BAE、SAE等平台上。大概生活中所有的创新都来源于对现状的不满意，[Hexo 颯爽登場！](https://zespia.tw/blog/2012/10/11/hexo-debut/)一篇来自[tommy351](http://twitter.com/tommy351)对[Octopress](http://octopress.org/)的吐槽。\n\n因为我Github的username为wenlisu，所以以下事例以wenlisu代替，宝宝们要将其换成自己Github的的username。\n\n 环境准备\n=============\n\n## 安装node\n\n到[Node.js](https://nodejs.org/en)官网下载相应平台的最新版本，一路安装即可，比较喜欢折腾的同学可以通过安装[nvm](https://github.com/creationix/nvm)或者n`n是Node的一个模块`来安装或管理node版本，体验也是相当不错的，我是用的nvm`^o^推荐`。\n\n## 安装Git\n\n目前市面上也有图形化界面版，例如[SmartGit](http://www.syntevo.com/smartgit/download)，挺方便直观的。  \n如果想要看起来高大上点的话，可以选择`shell`，可以在上面输入要执行的命令。首先，你可以试着输入git，看看系统有没有安装Git。\n\n```\n$ git\nThe program 'git' is currently not installed. You can install it by typing:\nsudo apt-get install git\n```\n\n假如没有安装，返回的信息提示通过一条`sudo apt-get install git`就可以直接完成Git的安装，非常简单。\n\n Github\n=============\n\n```\n* 首先注册一个『GitHub』帐号。\n* 建立与你用户名对应的仓库，仓库名为『your_user_name.github.io』。\n* 添加SSH公钥到『Account settings -> SSH Keys -> Add SSH Key』。 \n```\n建立与你用户名对应的仓库：\n\n![](http://ww3.sinaimg.cn/large/006tKfTcgy1ffplg4xs2kj30xp0kb40y.jpg)\n\n不知道宝宝们有没有遇到过这种情况，新建仓库后，在命令行中按照所给提示：输入以下命令时，会报错如下：\n\n```\nWarning: Permanently added the RSA host key for IP address '192.30.252.130' to the list of known hosts.\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n```\n\n所以主要讲第三步，怎么给Github添加SSH-Key，宝宝们，我是一路踩着坑过来的`( ´▽｀)`。\n\n## 首先设置你的用户名密码：\n\n```\n$ git config --global user.email \"415357008@qq.com\"\n$ git config --global user.name \"wenlisu\"\n```\n## 生成密钥：\n\n```\n$ ssh-keygen -t rsa -C \"415357008@qq.com\"\n```\n\n输入文件路径,一路默认`<Enter>`,当提示`Enter passphrase`是让你输入密码，假如输入，以后每提交一次就需要输入一次密码，反正我是不可能输密码的，每次都需要，多麻烦啊。\n\n```\nwebdevs-MacBook-Pro:wenlisu.github.io webdev$ ssh-keygen -t rsa -C \"415357008@qq.com\"\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/webdev/.ssh/id_rsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \n```\n\n## 将SSH密钥复制到剪贴板。\n\n```\n$ pbcopy < ~/.ssh/id_rsa.pub\n```\n\n接下来去到Github，点击`settings`。\n\n![](http://ww4.sinaimg.cn/large/006tKfTcgy1ffpmwc2yyjj30vd0jqdlr.jpg)\n\n按照以下操作给SSh key添加title（例如Personal MacBook）， 再将剪贴板的内容粘贴到key中，点击`Add SSH key按钮`。\n\n![](http://ww4.sinaimg.cn/large/006tKfTcgy1ffpmx1sdisj30uk0e3taf.jpg)\n\n至此，Github中的SSH已添加完毕，具体疑问可到[Github](https://help.github.com/categories/authenticating-to-github/)中查询。\n\n## 测试一下该SSH key\n```\n$ ssh -T git@github.com\n```\n\n当你输入以上代码时，会有一段警告代码，如：\n\n```\nThe authenticity of host 'github.com (207.97.227.239)' can't be established.\n# RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\n# Are you sure you want to continue connecting (yes/no)?\n```\n\n这是正常的，你输入 yes 回车既可。如果你创建 SSH key 的时候设置了密码，接下来就会提示你输入密码，如：\n\n```\nEnter passphrase for key '/c/Users/Administrator/.ssh/id_rsa':\n```\n\n密码正确后你会看到下面这段话，如：\n\n```\nHi username! You've successfully authenticated, but GitHub does not\n# provide shell access.\n```\n\n如果用户名是正确的,你已经成功设置SSH密钥。如果你看到 “access denied” ，则表示拒绝访问，那么你就需要使用 https 去访问，而不是 SSH 。\n\n接着下来安装Hexo。\n\n Hexo\n=============\n\n前提是必须先安装 [Node.js](https://nodejs.org/en)，在安装node.js过程中不懂的尽情问Google吧。   \n\n```\n$ npm install hexo -g\n```\n\n## 初始化\n\n如果制定 `<folder>`，便会在目前的文件夹下建立一个名为 `<folder>` 的新文件，否则会在目前文件下初始化。\n\n```\n$ hexo init <folder>\n$ cd <folder>\n```\n\n## 安装依赖包\n\n```\n$ npm install\n```\n\n## 生产静态文件 && 服务\n\n```\n$ hexo generate || hexo g \n$ hexo server   || hexo s \n```\n\n启动本地服务器，默认情况下，打开`http://localhost:4000/`。  \n到目前状态下，个人博客雏形基本已经完成，接下来，将如何把Hexo生成的静态网页内容目录放到Github上，打开博客根目录下的_config.yml在最下方加上。\n\n```\ndeploy:\n     type: git\n     repo: https://github.com/wenlisu/wenlisu.github.io.git\n     branch: master\n```\n\n每一步的部署，按照以下三个步骤进行\n\n```\n$ hexo clean\n$ hexo generate\n$ hexo deploy\n```\n当执行`hexo deploy`命令部署到GitHub上的内容目录啦，这时候打开`https://wenlisu.github.io`就将是自己的博客地址啦，是不是很方便快捷啊，宝宝们赶紧行动起来吧！","slug":"HEXO+Github，搭建属于自己的博客","published":1,"updated":"2017-05-26T13:31:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3652gfz00012hdhei64xzz6","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>一直都想拥有个属于自己的博客，之前买过域名做过静态展示类型的个人网站，苦于那时的自己对数据库操作不怎么了解，所以没有将其继续发展成动态网站并且维护下去，那时觉得自己需要搭建个动态博客，应该不只要会前端，后台至少也应该要懂些。<br>直到偶然的机会让我遇到了<a href=\"https://hexo.io\" target=\"_blank\" rel=\"external\">Hexo</a>。<br>Hexo+Github的结合让谁都能轻轻松松搭建起属于自己的博客，相当COOL，相信不久的将来，Hexo就会流行起来。<br>Hexo出自于台湾大学生<a href=\"http://twitter.com/tommy351\" target=\"_blank\" rel=\"external\">tommy351</a>之手，基于node.js环境的静态博客程序，Hexo生成的静态网页可以直接放到GitHub Pages、BAE、SAE等平台上。大概生活中所有的创新都来源于对现状的不满意，<a href=\"https://zespia.tw/blog/2012/10/11/hexo-debut/\" target=\"_blank\" rel=\"external\">Hexo 颯爽登場！</a>一篇来自<a href=\"http://twitter.com/tommy351\" target=\"_blank\" rel=\"external\">tommy351</a>对<a href=\"http://octopress.org/\" target=\"_blank\" rel=\"external\">Octopress</a>的吐槽。</p>\n<p>因为我Github的username为wenlisu，所以以下事例以wenlisu代替，宝宝们要将其换成自己Github的的username。</p>\n<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\" 环境准备\"></a> 环境准备</h1><h2 id=\"安装node\"><a href=\"#安装node\" class=\"headerlink\" title=\"安装node\"></a>安装node</h2><p>到<a href=\"https://nodejs.org/en\" target=\"_blank\" rel=\"external\">Node.js</a>官网下载相应平台的最新版本，一路安装即可，比较喜欢折腾的同学可以通过安装<a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"external\">nvm</a>或者n<code>n是Node的一个模块</code>来安装或管理node版本，体验也是相当不错的，我是用的nvm<code>^o^推荐</code>。</p>\n<h2 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h2><p>目前市面上也有图形化界面版，例如<a href=\"http://www.syntevo.com/smartgit/download\" target=\"_blank\" rel=\"external\">SmartGit</a>，挺方便直观的。<br>如果想要看起来高大上点的话，可以选择<code>shell</code>，可以在上面输入要执行的命令。首先，你可以试着输入git，看看系统有没有安装Git。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git</div><div class=\"line\">The program &apos;git&apos; is currently not installed. You can install it by typing:</div><div class=\"line\">sudo apt-get install git</div></pre></td></tr></table></figure>\n<p>假如没有安装，返回的信息提示通过一条<code>sudo apt-get install git</code>就可以直接完成Git的安装，非常简单。</p>\n<h1 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\" Github\"></a> Github</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">* 首先注册一个『GitHub』帐号。</div><div class=\"line\">* 建立与你用户名对应的仓库，仓库名为『your_user_name.github.io』。</div><div class=\"line\">* 添加SSH公钥到『Account settings -&gt; SSH Keys -&gt; Add SSH Key』。</div></pre></td></tr></table></figure>\n<p>建立与你用户名对应的仓库：</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/006tKfTcgy1ffplg4xs2kj30xp0kb40y.jpg\" alt=\"\"></p>\n<p>不知道宝宝们有没有遇到过这种情况，新建仓库后，在命令行中按照所给提示：输入以下命令时，会报错如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Warning: Permanently added the RSA host key for IP address &apos;192.30.252.130&apos; to the list of known hosts.</div><div class=\"line\">Permission denied (publickey).</div><div class=\"line\">fatal: Could not read from remote repository.</div></pre></td></tr></table></figure>\n<p>所以主要讲第三步，怎么给Github添加SSH-Key，宝宝们，我是一路踩着坑过来的<code>( ´▽｀)</code>。</p>\n<h2 id=\"首先设置你的用户名密码：\"><a href=\"#首先设置你的用户名密码：\" class=\"headerlink\" title=\"首先设置你的用户名密码：\"></a>首先设置你的用户名密码：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.email &quot;415357008@qq.com&quot;</div><div class=\"line\">$ git config --global user.name &quot;wenlisu&quot;</div></pre></td></tr></table></figure>\n<h2 id=\"生成密钥：\"><a href=\"#生成密钥：\" class=\"headerlink\" title=\"生成密钥：\"></a>生成密钥：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa -C &quot;415357008@qq.com&quot;</div></pre></td></tr></table></figure>\n<p>输入文件路径,一路默认<code>&lt;Enter&gt;</code>,当提示<code>Enter passphrase</code>是让你输入密码，假如输入，以后每提交一次就需要输入一次密码，反正我是不可能输密码的，每次都需要，多麻烦啊。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">webdevs-MacBook-Pro:wenlisu.github.io webdev$ ssh-keygen -t rsa -C &quot;415357008@qq.com&quot;</div><div class=\"line\">Generating public/private rsa key pair.</div><div class=\"line\">Enter file in which to save the key (/Users/webdev/.ssh/id_rsa): </div><div class=\"line\">Enter passphrase (empty for no passphrase): </div><div class=\"line\">Enter same passphrase again:</div></pre></td></tr></table></figure>\n<h2 id=\"将SSH密钥复制到剪贴板。\"><a href=\"#将SSH密钥复制到剪贴板。\" class=\"headerlink\" title=\"将SSH密钥复制到剪贴板。\"></a>将SSH密钥复制到剪贴板。</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pbcopy &lt; ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure>\n<p>接下来去到Github，点击<code>settings</code>。</p>\n<p><img src=\"http://ww4.sinaimg.cn/large/006tKfTcgy1ffpmwc2yyjj30vd0jqdlr.jpg\" alt=\"\"></p>\n<p>按照以下操作给SSh key添加title（例如Personal MacBook）， 再将剪贴板的内容粘贴到key中，点击<code>Add SSH key按钮</code>。</p>\n<p><img src=\"http://ww4.sinaimg.cn/large/006tKfTcgy1ffpmx1sdisj30uk0e3taf.jpg\" alt=\"\"></p>\n<p>至此，Github中的SSH已添加完毕，具体疑问可到<a href=\"https://help.github.com/categories/authenticating-to-github/\" target=\"_blank\" rel=\"external\">Github</a>中查询。</p>\n<h2 id=\"测试一下该SSH-key\"><a href=\"#测试一下该SSH-key\" class=\"headerlink\" title=\"测试一下该SSH key\"></a>测试一下该SSH key</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh -T git@github.com</div></pre></td></tr></table></figure>\n<p>当你输入以上代码时，会有一段警告代码，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.</div><div class=\"line\"># RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</div><div class=\"line\"># Are you sure you want to continue connecting (yes/no)?</div></pre></td></tr></table></figure>\n<p>这是正常的，你输入 yes 回车既可。如果你创建 SSH key 的时候设置了密码，接下来就会提示你输入密码，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Enter passphrase for key &apos;/c/Users/Administrator/.ssh/id_rsa&apos;:</div></pre></td></tr></table></figure>\n<p>密码正确后你会看到下面这段话，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hi username! You&apos;ve successfully authenticated, but GitHub does not</div><div class=\"line\"># provide shell access.</div></pre></td></tr></table></figure>\n<p>如果用户名是正确的,你已经成功设置SSH密钥。如果你看到 “access denied” ，则表示拒绝访问，那么你就需要使用 https 去访问，而不是 SSH 。</p>\n<p>接着下来安装Hexo。</p>\n<h1 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\" Hexo\"></a> Hexo</h1><p>前提是必须先安装 <a href=\"https://nodejs.org/en\" target=\"_blank\" rel=\"external\">Node.js</a>，在安装node.js过程中不懂的尽情问Google吧。   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo -g</div></pre></td></tr></table></figure>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>如果制定 <code>&lt;folder&gt;</code>，便会在目前的文件夹下建立一个名为 <code>&lt;folder&gt;</code> 的新文件，否则会在目前文件下初始化。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init &lt;folder&gt;</div><div class=\"line\">$ cd &lt;folder&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"安装依赖包\"><a href=\"#安装依赖包\" class=\"headerlink\" title=\"安装依赖包\"></a>安装依赖包</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install</div></pre></td></tr></table></figure>\n<h2 id=\"生产静态文件-amp-amp-服务\"><a href=\"#生产静态文件-amp-amp-服务\" class=\"headerlink\" title=\"生产静态文件 &amp;&amp; 服务\"></a>生产静态文件 &amp;&amp; 服务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate || hexo g </div><div class=\"line\">$ hexo server   || hexo s</div></pre></td></tr></table></figure>\n<p>启动本地服务器，默认情况下，打开<code>http://localhost:4000/</code>。<br>到目前状态下，个人博客雏形基本已经完成，接下来，将如何把Hexo生成的静态网页内容目录放到Github上，打开博客根目录下的_config.yml在最下方加上。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">     type: git</div><div class=\"line\">     repo: https://github.com/wenlisu/wenlisu.github.io.git</div><div class=\"line\">     branch: master</div></pre></td></tr></table></figure>\n<p>每一步的部署，按照以下三个步骤进行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div><div class=\"line\">$ hexo generate</div><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>当执行<code>hexo deploy</code>命令部署到GitHub上的内容目录啦，这时候打开<code>https://wenlisu.github.io</code>就将是自己的博客地址啦，是不是很方便快捷啊，宝宝们赶紧行动起来吧！</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>一直都想拥有个属于自己的博客，之前买过域名做过静态展示类型的个人网站，苦于那时的自己对数据库操作不怎么了解，所以没有将其继续发展成动态网站并且维护下去，那时觉得自己需要搭建个动态博客，应该不只要会前端，后台至少也应该要懂些。<br>直到偶然的机会让我遇到了<a href=\"https://hexo.io\" target=\"_blank\" rel=\"external\">Hexo</a>。<br>Hexo+Github的结合让谁都能轻轻松松搭建起属于自己的博客，相当COOL，相信不久的将来，Hexo就会流行起来。<br>Hexo出自于台湾大学生<a href=\"http://twitter.com/tommy351\" target=\"_blank\" rel=\"external\">tommy351</a>之手，基于node.js环境的静态博客程序，Hexo生成的静态网页可以直接放到GitHub Pages、BAE、SAE等平台上。大概生活中所有的创新都来源于对现状的不满意，<a href=\"https://zespia.tw/blog/2012/10/11/hexo-debut/\" target=\"_blank\" rel=\"external\">Hexo 颯爽登場！</a>一篇来自<a href=\"http://twitter.com/tommy351\" target=\"_blank\" rel=\"external\">tommy351</a>对<a href=\"http://octopress.org/\" target=\"_blank\" rel=\"external\">Octopress</a>的吐槽。</p>\n<p>因为我Github的username为wenlisu，所以以下事例以wenlisu代替，宝宝们要将其换成自己Github的的username。</p>\n<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\" 环境准备\"></a> 环境准备</h1><h2 id=\"安装node\"><a href=\"#安装node\" class=\"headerlink\" title=\"安装node\"></a>安装node</h2><p>到<a href=\"https://nodejs.org/en\" target=\"_blank\" rel=\"external\">Node.js</a>官网下载相应平台的最新版本，一路安装即可，比较喜欢折腾的同学可以通过安装<a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"external\">nvm</a>或者n<code>n是Node的一个模块</code>来安装或管理node版本，体验也是相当不错的，我是用的nvm<code>^o^推荐</code>。</p>\n<h2 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h2><p>目前市面上也有图形化界面版，例如<a href=\"http://www.syntevo.com/smartgit/download\" target=\"_blank\" rel=\"external\">SmartGit</a>，挺方便直观的。<br>如果想要看起来高大上点的话，可以选择<code>shell</code>，可以在上面输入要执行的命令。首先，你可以试着输入git，看看系统有没有安装Git。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git</div><div class=\"line\">The program &apos;git&apos; is currently not installed. You can install it by typing:</div><div class=\"line\">sudo apt-get install git</div></pre></td></tr></table></figure>\n<p>假如没有安装，返回的信息提示通过一条<code>sudo apt-get install git</code>就可以直接完成Git的安装，非常简单。</p>\n<h1 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\" Github\"></a> Github</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">* 首先注册一个『GitHub』帐号。</div><div class=\"line\">* 建立与你用户名对应的仓库，仓库名为『your_user_name.github.io』。</div><div class=\"line\">* 添加SSH公钥到『Account settings -&gt; SSH Keys -&gt; Add SSH Key』。</div></pre></td></tr></table></figure>\n<p>建立与你用户名对应的仓库：</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/006tKfTcgy1ffplg4xs2kj30xp0kb40y.jpg\" alt=\"\"></p>\n<p>不知道宝宝们有没有遇到过这种情况，新建仓库后，在命令行中按照所给提示：输入以下命令时，会报错如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Warning: Permanently added the RSA host key for IP address &apos;192.30.252.130&apos; to the list of known hosts.</div><div class=\"line\">Permission denied (publickey).</div><div class=\"line\">fatal: Could not read from remote repository.</div></pre></td></tr></table></figure>\n<p>所以主要讲第三步，怎么给Github添加SSH-Key，宝宝们，我是一路踩着坑过来的<code>( ´▽｀)</code>。</p>\n<h2 id=\"首先设置你的用户名密码：\"><a href=\"#首先设置你的用户名密码：\" class=\"headerlink\" title=\"首先设置你的用户名密码：\"></a>首先设置你的用户名密码：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.email &quot;415357008@qq.com&quot;</div><div class=\"line\">$ git config --global user.name &quot;wenlisu&quot;</div></pre></td></tr></table></figure>\n<h2 id=\"生成密钥：\"><a href=\"#生成密钥：\" class=\"headerlink\" title=\"生成密钥：\"></a>生成密钥：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa -C &quot;415357008@qq.com&quot;</div></pre></td></tr></table></figure>\n<p>输入文件路径,一路默认<code>&lt;Enter&gt;</code>,当提示<code>Enter passphrase</code>是让你输入密码，假如输入，以后每提交一次就需要输入一次密码，反正我是不可能输密码的，每次都需要，多麻烦啊。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">webdevs-MacBook-Pro:wenlisu.github.io webdev$ ssh-keygen -t rsa -C &quot;415357008@qq.com&quot;</div><div class=\"line\">Generating public/private rsa key pair.</div><div class=\"line\">Enter file in which to save the key (/Users/webdev/.ssh/id_rsa): </div><div class=\"line\">Enter passphrase (empty for no passphrase): </div><div class=\"line\">Enter same passphrase again:</div></pre></td></tr></table></figure>\n<h2 id=\"将SSH密钥复制到剪贴板。\"><a href=\"#将SSH密钥复制到剪贴板。\" class=\"headerlink\" title=\"将SSH密钥复制到剪贴板。\"></a>将SSH密钥复制到剪贴板。</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pbcopy &lt; ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure>\n<p>接下来去到Github，点击<code>settings</code>。</p>\n<p><img src=\"http://ww4.sinaimg.cn/large/006tKfTcgy1ffpmwc2yyjj30vd0jqdlr.jpg\" alt=\"\"></p>\n<p>按照以下操作给SSh key添加title（例如Personal MacBook）， 再将剪贴板的内容粘贴到key中，点击<code>Add SSH key按钮</code>。</p>\n<p><img src=\"http://ww4.sinaimg.cn/large/006tKfTcgy1ffpmx1sdisj30uk0e3taf.jpg\" alt=\"\"></p>\n<p>至此，Github中的SSH已添加完毕，具体疑问可到<a href=\"https://help.github.com/categories/authenticating-to-github/\" target=\"_blank\" rel=\"external\">Github</a>中查询。</p>\n<h2 id=\"测试一下该SSH-key\"><a href=\"#测试一下该SSH-key\" class=\"headerlink\" title=\"测试一下该SSH key\"></a>测试一下该SSH key</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh -T git@github.com</div></pre></td></tr></table></figure>\n<p>当你输入以上代码时，会有一段警告代码，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.</div><div class=\"line\"># RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</div><div class=\"line\"># Are you sure you want to continue connecting (yes/no)?</div></pre></td></tr></table></figure>\n<p>这是正常的，你输入 yes 回车既可。如果你创建 SSH key 的时候设置了密码，接下来就会提示你输入密码，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Enter passphrase for key &apos;/c/Users/Administrator/.ssh/id_rsa&apos;:</div></pre></td></tr></table></figure>\n<p>密码正确后你会看到下面这段话，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hi username! You&apos;ve successfully authenticated, but GitHub does not</div><div class=\"line\"># provide shell access.</div></pre></td></tr></table></figure>\n<p>如果用户名是正确的,你已经成功设置SSH密钥。如果你看到 “access denied” ，则表示拒绝访问，那么你就需要使用 https 去访问，而不是 SSH 。</p>\n<p>接着下来安装Hexo。</p>\n<h1 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\" Hexo\"></a> Hexo</h1><p>前提是必须先安装 <a href=\"https://nodejs.org/en\" target=\"_blank\" rel=\"external\">Node.js</a>，在安装node.js过程中不懂的尽情问Google吧。   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo -g</div></pre></td></tr></table></figure>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>如果制定 <code>&lt;folder&gt;</code>，便会在目前的文件夹下建立一个名为 <code>&lt;folder&gt;</code> 的新文件，否则会在目前文件下初始化。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init &lt;folder&gt;</div><div class=\"line\">$ cd &lt;folder&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"安装依赖包\"><a href=\"#安装依赖包\" class=\"headerlink\" title=\"安装依赖包\"></a>安装依赖包</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install</div></pre></td></tr></table></figure>\n<h2 id=\"生产静态文件-amp-amp-服务\"><a href=\"#生产静态文件-amp-amp-服务\" class=\"headerlink\" title=\"生产静态文件 &amp;&amp; 服务\"></a>生产静态文件 &amp;&amp; 服务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate || hexo g </div><div class=\"line\">$ hexo server   || hexo s</div></pre></td></tr></table></figure>\n<p>启动本地服务器，默认情况下，打开<code>http://localhost:4000/</code>。<br>到目前状态下，个人博客雏形基本已经完成，接下来，将如何把Hexo生成的静态网页内容目录放到Github上，打开博客根目录下的_config.yml在最下方加上。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">     type: git</div><div class=\"line\">     repo: https://github.com/wenlisu/wenlisu.github.io.git</div><div class=\"line\">     branch: master</div></pre></td></tr></table></figure>\n<p>每一步的部署，按照以下三个步骤进行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div><div class=\"line\">$ hexo generate</div><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>当执行<code>hexo deploy</code>命令部署到GitHub上的内容目录啦，这时候打开<code>https://wenlisu.github.io</code>就将是自己的博客地址啦，是不是很方便快捷啊，宝宝们赶紧行动起来吧！</p>\n"},{"title":"微信小程序","author":"LS","date":"2017-05-22T05:44:16.000Z","_content":"前言：\n=============\n\n由于微信小程序目前处于内侧阶段,因此Demo是在无AppId情况下创建的。[Dome链接]()\n\n## 开发环境：\n\n微信web开发者工具 最新版本 2017.05.19 （0.17.171900）\n下载地址:[https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html](https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html)  \n官方文档:[http://wxopen.bcoder.cn/index.htm](http://wxopen.bcoder.cn/index.htm)\n\n## 创建项目：\n\n开发者工具安装完成后，打开并使用微信扫码登录。选择创建`「项目」`，填入上文获取到的 AppID，设置一个本地项目的名称（非小程序名称），比如`「我的第一个项目」`，并选择一个本地的文件夹作为代码存储的目录，点击`「新建项目」`就可以了。   \n为方便初学者了解微信小程序的基本代码结构，在创建过程中，如果选择的本地文件夹是个空文件夹，开发者工具会提示，是否需要创建一个 quick start 项目。选择「是」，开发者工具会帮助我们在开发目录里生成一个简单的 `demo`。\n\n![](http://ww4.sinaimg.cn/large/006tKfTcgy1ffu3b3redzj30gl0dwaao.jpg)\n\n项目创建成功后，我们就可以点击该项目，进入并看到完整的开发者工具界面，点击左侧导航，在「编辑」里可以查看和编辑我们的代码，在「调试」里可以测试代码并模拟小程序在微信客户端效果.\n\n![](http://ww2.sinaimg.cn/large/006tKfTcgy1ffu3bqwjknj30ad0ilq3b.jpg)\n\n## 初始化小程序：\n\n**app.js - 小程序的脚本代码,声明全局变量**\n\n```\nApp({\n  onLaunch: function() { \n        // Do something initial when launch.\n    },\n    onShow: function() {\n        // Do something when show.\n    },\n    onHide: function() {\n        // Do something when hide.\n    },\n    globalData: 'I am global data'\n})\n```\n\n**app.json - 小程序的全局配置,配置小程序的窗口背景色，配置导航条样式，配置默认标题**\n\n```\n\"window\":{\n    \"backgroundTextStyle\":\"light\",\n    \"navigationBarTextStyle\": \"white\",\n    \"navigationBarTitleText\": \"Small App\",\n    \"navigationBarBackgroundColor\": \"#000000\",\n    \"backgroundColor\": \"#fbf9fe\",\n    \"enablePullDownRefresh\": true\n  }\n```\n\n**app.wxss - 小程序的公共样式表**\n\n```\n/**app.wxss**/\n@import \"./style/layout.wxss\"; `通过import引入其他样式表`\n    .container {\n    font-family: Helvetica Neue,Helvetica,Arial,sans-serif;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    box-sizing: border-box;\n    } \n```\n\n\n## 目录结构：\n\n- `style` — 存放独立wxss文件，可import引入\n- `image` — 存放项目图片\n- `pages` — 存放项目页面相关文件\n- `utils` — 存放utils文件(通过module.exports对外暴露接口)，可require引入\n\n## 创建页面：\n\n微信小程序中的每一个页面的【路径+页面名】都需要写在 app.json 的 pages 中，且 pages 中的第一个页面是小程序的首页,每一个小程序页面是由同路径下同名的四个不同后缀文件的组成\n\n**index.js** \n\n```\nPage({\n    data: {\n    motto: 'Hello World'\n    }\n})\n```\n\n**index.wxml - 页面结构文件**\n\n```\n<text class=\"user-motto\">{{motto}}</text>\n```\n\n**index.wxss**\n\n```\n页面的样式表中的样式规则权重大于app.wxss\n```\n\n**index.json**\n\n```\n页面的配置文件.json会覆盖app.json 的 window 中相同的配置项\n```\n\n## 框架：\n\n- 逻辑层\n\t+ 注册程序\n\t\t- 通过全局函数getApp()可以获取全局的应用实例，如果需要全局的数据可以在App()中设置\n\t+ 注册页面\n\t+ 模块化\n\t\t- 我们可以将一些公共的代码抽离成为一个单独的js文件，作为一个模块。模块只有通过module.exports才能对外暴露接口。\n\t+ API\n\t+ 路由\n\t\t- wx.navigateTo(OBJECT)：保留当前页面，跳转到应用内的某个页面，使用wx.navigateBack可以返回到原页面,一个应用同时只能打开5个页面\n\t\t- wx.redirectTo(OBJECT)：关闭当前页面，跳转到应用内的某个页面\n\t\t- wx.navigateBack()：关闭当前页面，回退前一页面\n- 视图层\n\t+ 条件渲染\n\t+ 列表渲染\n\t+ 模板\n\t+ 事件\n\t+ 引用","source":"_posts/微信小程序.md","raw":"title: 微信小程序\nauthor: LS\ncategories: 手册\ndate: 2017-05-22 13:44:16\ntags:\n---\n前言：\n=============\n\n由于微信小程序目前处于内侧阶段,因此Demo是在无AppId情况下创建的。[Dome链接]()\n\n## 开发环境：\n\n微信web开发者工具 最新版本 2017.05.19 （0.17.171900）\n下载地址:[https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html](https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html)  \n官方文档:[http://wxopen.bcoder.cn/index.htm](http://wxopen.bcoder.cn/index.htm)\n\n## 创建项目：\n\n开发者工具安装完成后，打开并使用微信扫码登录。选择创建`「项目」`，填入上文获取到的 AppID，设置一个本地项目的名称（非小程序名称），比如`「我的第一个项目」`，并选择一个本地的文件夹作为代码存储的目录，点击`「新建项目」`就可以了。   \n为方便初学者了解微信小程序的基本代码结构，在创建过程中，如果选择的本地文件夹是个空文件夹，开发者工具会提示，是否需要创建一个 quick start 项目。选择「是」，开发者工具会帮助我们在开发目录里生成一个简单的 `demo`。\n\n![](http://ww4.sinaimg.cn/large/006tKfTcgy1ffu3b3redzj30gl0dwaao.jpg)\n\n项目创建成功后，我们就可以点击该项目，进入并看到完整的开发者工具界面，点击左侧导航，在「编辑」里可以查看和编辑我们的代码，在「调试」里可以测试代码并模拟小程序在微信客户端效果.\n\n![](http://ww2.sinaimg.cn/large/006tKfTcgy1ffu3bqwjknj30ad0ilq3b.jpg)\n\n## 初始化小程序：\n\n**app.js - 小程序的脚本代码,声明全局变量**\n\n```\nApp({\n  onLaunch: function() { \n        // Do something initial when launch.\n    },\n    onShow: function() {\n        // Do something when show.\n    },\n    onHide: function() {\n        // Do something when hide.\n    },\n    globalData: 'I am global data'\n})\n```\n\n**app.json - 小程序的全局配置,配置小程序的窗口背景色，配置导航条样式，配置默认标题**\n\n```\n\"window\":{\n    \"backgroundTextStyle\":\"light\",\n    \"navigationBarTextStyle\": \"white\",\n    \"navigationBarTitleText\": \"Small App\",\n    \"navigationBarBackgroundColor\": \"#000000\",\n    \"backgroundColor\": \"#fbf9fe\",\n    \"enablePullDownRefresh\": true\n  }\n```\n\n**app.wxss - 小程序的公共样式表**\n\n```\n/**app.wxss**/\n@import \"./style/layout.wxss\"; `通过import引入其他样式表`\n    .container {\n    font-family: Helvetica Neue,Helvetica,Arial,sans-serif;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    box-sizing: border-box;\n    } \n```\n\n\n## 目录结构：\n\n- `style` — 存放独立wxss文件，可import引入\n- `image` — 存放项目图片\n- `pages` — 存放项目页面相关文件\n- `utils` — 存放utils文件(通过module.exports对外暴露接口)，可require引入\n\n## 创建页面：\n\n微信小程序中的每一个页面的【路径+页面名】都需要写在 app.json 的 pages 中，且 pages 中的第一个页面是小程序的首页,每一个小程序页面是由同路径下同名的四个不同后缀文件的组成\n\n**index.js** \n\n```\nPage({\n    data: {\n    motto: 'Hello World'\n    }\n})\n```\n\n**index.wxml - 页面结构文件**\n\n```\n<text class=\"user-motto\">{{motto}}</text>\n```\n\n**index.wxss**\n\n```\n页面的样式表中的样式规则权重大于app.wxss\n```\n\n**index.json**\n\n```\n页面的配置文件.json会覆盖app.json 的 window 中相同的配置项\n```\n\n## 框架：\n\n- 逻辑层\n\t+ 注册程序\n\t\t- 通过全局函数getApp()可以获取全局的应用实例，如果需要全局的数据可以在App()中设置\n\t+ 注册页面\n\t+ 模块化\n\t\t- 我们可以将一些公共的代码抽离成为一个单独的js文件，作为一个模块。模块只有通过module.exports才能对外暴露接口。\n\t+ API\n\t+ 路由\n\t\t- wx.navigateTo(OBJECT)：保留当前页面，跳转到应用内的某个页面，使用wx.navigateBack可以返回到原页面,一个应用同时只能打开5个页面\n\t\t- wx.redirectTo(OBJECT)：关闭当前页面，跳转到应用内的某个页面\n\t\t- wx.navigateBack()：关闭当前页面，回退前一页面\n- 视图层\n\t+ 条件渲染\n\t+ 列表渲染\n\t+ 模板\n\t+ 事件\n\t+ 引用","slug":"微信小程序","published":1,"updated":"2017-05-26T12:02:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3652gga00032hdhqyi3to96","content":"<h1 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h1><p>由于微信小程序目前处于内侧阶段,因此Demo是在无AppId情况下创建的。<a href=\"\">Dome链接</a></p>\n<h2 id=\"开发环境：\"><a href=\"#开发环境：\" class=\"headerlink\" title=\"开发环境：\"></a>开发环境：</h2><p>微信web开发者工具 最新版本 2017.05.19 （0.17.171900）<br>下载地址:<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html\" target=\"_blank\" rel=\"external\">https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html</a><br>官方文档:<a href=\"http://wxopen.bcoder.cn/index.htm\" target=\"_blank\" rel=\"external\">http://wxopen.bcoder.cn/index.htm</a></p>\n<h2 id=\"创建项目：\"><a href=\"#创建项目：\" class=\"headerlink\" title=\"创建项目：\"></a>创建项目：</h2><p>开发者工具安装完成后，打开并使用微信扫码登录。选择创建<code>「项目」</code>，填入上文获取到的 AppID，设置一个本地项目的名称（非小程序名称），比如<code>「我的第一个项目」</code>，并选择一个本地的文件夹作为代码存储的目录，点击<code>「新建项目」</code>就可以了。<br>为方便初学者了解微信小程序的基本代码结构，在创建过程中，如果选择的本地文件夹是个空文件夹，开发者工具会提示，是否需要创建一个 quick start 项目。选择「是」，开发者工具会帮助我们在开发目录里生成一个简单的 <code>demo</code>。</p>\n<p><img src=\"http://ww4.sinaimg.cn/large/006tKfTcgy1ffu3b3redzj30gl0dwaao.jpg\" alt=\"\"></p>\n<p>项目创建成功后，我们就可以点击该项目，进入并看到完整的开发者工具界面，点击左侧导航，在「编辑」里可以查看和编辑我们的代码，在「调试」里可以测试代码并模拟小程序在微信客户端效果.</p>\n<p><img src=\"http://ww2.sinaimg.cn/large/006tKfTcgy1ffu3bqwjknj30ad0ilq3b.jpg\" alt=\"\"></p>\n<h2 id=\"初始化小程序：\"><a href=\"#初始化小程序：\" class=\"headerlink\" title=\"初始化小程序：\"></a>初始化小程序：</h2><p><strong>app.js - 小程序的脚本代码,声明全局变量</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">App(&#123;</div><div class=\"line\">  onLaunch: function() &#123; </div><div class=\"line\">        // Do something initial when launch.</div><div class=\"line\">    &#125;,</div><div class=\"line\">    onShow: function() &#123;</div><div class=\"line\">        // Do something when show.</div><div class=\"line\">    &#125;,</div><div class=\"line\">    onHide: function() &#123;</div><div class=\"line\">        // Do something when hide.</div><div class=\"line\">    &#125;,</div><div class=\"line\">    globalData: &apos;I am global data&apos;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p><strong>app.json - 小程序的全局配置,配置小程序的窗口背景色，配置导航条样式，配置默认标题</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;window&quot;:&#123;</div><div class=\"line\">    &quot;backgroundTextStyle&quot;:&quot;light&quot;,</div><div class=\"line\">    &quot;navigationBarTextStyle&quot;: &quot;white&quot;,</div><div class=\"line\">    &quot;navigationBarTitleText&quot;: &quot;Small App&quot;,</div><div class=\"line\">    &quot;navigationBarBackgroundColor&quot;: &quot;#000000&quot;,</div><div class=\"line\">    &quot;backgroundColor&quot;: &quot;#fbf9fe&quot;,</div><div class=\"line\">    &quot;enablePullDownRefresh&quot;: true</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p><strong>app.wxss - 小程序的公共样式表</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**app.wxss**/</div><div class=\"line\">@import &quot;./style/layout.wxss&quot;; `通过import引入其他样式表`</div><div class=\"line\">    .container &#123;</div><div class=\"line\">    font-family: Helvetica Neue,Helvetica,Arial,sans-serif;</div><div class=\"line\">    display: flex;</div><div class=\"line\">    flex-direction: column;</div><div class=\"line\">    justify-content: space-between;</div><div class=\"line\">    box-sizing: border-box;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"目录结构：\"><a href=\"#目录结构：\" class=\"headerlink\" title=\"目录结构：\"></a>目录结构：</h2><ul>\n<li><code>style</code> — 存放独立wxss文件，可import引入</li>\n<li><code>image</code> — 存放项目图片</li>\n<li><code>pages</code> — 存放项目页面相关文件</li>\n<li><code>utils</code> — 存放utils文件(通过module.exports对外暴露接口)，可require引入</li>\n</ul>\n<h2 id=\"创建页面：\"><a href=\"#创建页面：\" class=\"headerlink\" title=\"创建页面：\"></a>创建页面：</h2><p>微信小程序中的每一个页面的【路径+页面名】都需要写在 app.json 的 pages 中，且 pages 中的第一个页面是小程序的首页,每一个小程序页面是由同路径下同名的四个不同后缀文件的组成</p>\n<p><strong>index.js</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Page(&#123;</div><div class=\"line\">    data: &#123;</div><div class=\"line\">    motto: &apos;Hello World&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p><strong>index.wxml - 页面结构文件</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;text class=&quot;user-motto&quot;&gt;&#123;&#123;motto&#125;&#125;&lt;/text&gt;</div></pre></td></tr></table></figure>\n<p><strong>index.wxss</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">页面的样式表中的样式规则权重大于app.wxss</div></pre></td></tr></table></figure>\n<p><strong>index.json</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">页面的配置文件.json会覆盖app.json 的 window 中相同的配置项</div></pre></td></tr></table></figure>\n<h2 id=\"框架：\"><a href=\"#框架：\" class=\"headerlink\" title=\"框架：\"></a>框架：</h2><ul>\n<li>逻辑层<ul>\n<li>注册程序<ul>\n<li>通过全局函数getApp()可以获取全局的应用实例，如果需要全局的数据可以在App()中设置</li>\n</ul>\n</li>\n<li>注册页面</li>\n<li>模块化<ul>\n<li>我们可以将一些公共的代码抽离成为一个单独的js文件，作为一个模块。模块只有通过module.exports才能对外暴露接口。</li>\n</ul>\n</li>\n<li>API</li>\n<li>路由<ul>\n<li>wx.navigateTo(OBJECT)：保留当前页面，跳转到应用内的某个页面，使用wx.navigateBack可以返回到原页面,一个应用同时只能打开5个页面</li>\n<li>wx.redirectTo(OBJECT)：关闭当前页面，跳转到应用内的某个页面</li>\n<li>wx.navigateBack()：关闭当前页面，回退前一页面</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>视图层<ul>\n<li>条件渲染</li>\n<li>列表渲染</li>\n<li>模板</li>\n<li>事件</li>\n<li>引用</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h1><p>由于微信小程序目前处于内侧阶段,因此Demo是在无AppId情况下创建的。<a href=\"\">Dome链接</a></p>\n<h2 id=\"开发环境：\"><a href=\"#开发环境：\" class=\"headerlink\" title=\"开发环境：\"></a>开发环境：</h2><p>微信web开发者工具 最新版本 2017.05.19 （0.17.171900）<br>下载地址:<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html\" target=\"_blank\" rel=\"external\">https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html</a><br>官方文档:<a href=\"http://wxopen.bcoder.cn/index.htm\" target=\"_blank\" rel=\"external\">http://wxopen.bcoder.cn/index.htm</a></p>\n<h2 id=\"创建项目：\"><a href=\"#创建项目：\" class=\"headerlink\" title=\"创建项目：\"></a>创建项目：</h2><p>开发者工具安装完成后，打开并使用微信扫码登录。选择创建<code>「项目」</code>，填入上文获取到的 AppID，设置一个本地项目的名称（非小程序名称），比如<code>「我的第一个项目」</code>，并选择一个本地的文件夹作为代码存储的目录，点击<code>「新建项目」</code>就可以了。<br>为方便初学者了解微信小程序的基本代码结构，在创建过程中，如果选择的本地文件夹是个空文件夹，开发者工具会提示，是否需要创建一个 quick start 项目。选择「是」，开发者工具会帮助我们在开发目录里生成一个简单的 <code>demo</code>。</p>\n<p><img src=\"http://ww4.sinaimg.cn/large/006tKfTcgy1ffu3b3redzj30gl0dwaao.jpg\" alt=\"\"></p>\n<p>项目创建成功后，我们就可以点击该项目，进入并看到完整的开发者工具界面，点击左侧导航，在「编辑」里可以查看和编辑我们的代码，在「调试」里可以测试代码并模拟小程序在微信客户端效果.</p>\n<p><img src=\"http://ww2.sinaimg.cn/large/006tKfTcgy1ffu3bqwjknj30ad0ilq3b.jpg\" alt=\"\"></p>\n<h2 id=\"初始化小程序：\"><a href=\"#初始化小程序：\" class=\"headerlink\" title=\"初始化小程序：\"></a>初始化小程序：</h2><p><strong>app.js - 小程序的脚本代码,声明全局变量</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">App(&#123;</div><div class=\"line\">  onLaunch: function() &#123; </div><div class=\"line\">        // Do something initial when launch.</div><div class=\"line\">    &#125;,</div><div class=\"line\">    onShow: function() &#123;</div><div class=\"line\">        // Do something when show.</div><div class=\"line\">    &#125;,</div><div class=\"line\">    onHide: function() &#123;</div><div class=\"line\">        // Do something when hide.</div><div class=\"line\">    &#125;,</div><div class=\"line\">    globalData: &apos;I am global data&apos;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p><strong>app.json - 小程序的全局配置,配置小程序的窗口背景色，配置导航条样式，配置默认标题</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;window&quot;:&#123;</div><div class=\"line\">    &quot;backgroundTextStyle&quot;:&quot;light&quot;,</div><div class=\"line\">    &quot;navigationBarTextStyle&quot;: &quot;white&quot;,</div><div class=\"line\">    &quot;navigationBarTitleText&quot;: &quot;Small App&quot;,</div><div class=\"line\">    &quot;navigationBarBackgroundColor&quot;: &quot;#000000&quot;,</div><div class=\"line\">    &quot;backgroundColor&quot;: &quot;#fbf9fe&quot;,</div><div class=\"line\">    &quot;enablePullDownRefresh&quot;: true</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p><strong>app.wxss - 小程序的公共样式表</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**app.wxss**/</div><div class=\"line\">@import &quot;./style/layout.wxss&quot;; `通过import引入其他样式表`</div><div class=\"line\">    .container &#123;</div><div class=\"line\">    font-family: Helvetica Neue,Helvetica,Arial,sans-serif;</div><div class=\"line\">    display: flex;</div><div class=\"line\">    flex-direction: column;</div><div class=\"line\">    justify-content: space-between;</div><div class=\"line\">    box-sizing: border-box;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"目录结构：\"><a href=\"#目录结构：\" class=\"headerlink\" title=\"目录结构：\"></a>目录结构：</h2><ul>\n<li><code>style</code> — 存放独立wxss文件，可import引入</li>\n<li><code>image</code> — 存放项目图片</li>\n<li><code>pages</code> — 存放项目页面相关文件</li>\n<li><code>utils</code> — 存放utils文件(通过module.exports对外暴露接口)，可require引入</li>\n</ul>\n<h2 id=\"创建页面：\"><a href=\"#创建页面：\" class=\"headerlink\" title=\"创建页面：\"></a>创建页面：</h2><p>微信小程序中的每一个页面的【路径+页面名】都需要写在 app.json 的 pages 中，且 pages 中的第一个页面是小程序的首页,每一个小程序页面是由同路径下同名的四个不同后缀文件的组成</p>\n<p><strong>index.js</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Page(&#123;</div><div class=\"line\">    data: &#123;</div><div class=\"line\">    motto: &apos;Hello World&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p><strong>index.wxml - 页面结构文件</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;text class=&quot;user-motto&quot;&gt;&#123;&#123;motto&#125;&#125;&lt;/text&gt;</div></pre></td></tr></table></figure>\n<p><strong>index.wxss</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">页面的样式表中的样式规则权重大于app.wxss</div></pre></td></tr></table></figure>\n<p><strong>index.json</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">页面的配置文件.json会覆盖app.json 的 window 中相同的配置项</div></pre></td></tr></table></figure>\n<h2 id=\"框架：\"><a href=\"#框架：\" class=\"headerlink\" title=\"框架：\"></a>框架：</h2><ul>\n<li>逻辑层<ul>\n<li>注册程序<ul>\n<li>通过全局函数getApp()可以获取全局的应用实例，如果需要全局的数据可以在App()中设置</li>\n</ul>\n</li>\n<li>注册页面</li>\n<li>模块化<ul>\n<li>我们可以将一些公共的代码抽离成为一个单独的js文件，作为一个模块。模块只有通过module.exports才能对外暴露接口。</li>\n</ul>\n</li>\n<li>API</li>\n<li>路由<ul>\n<li>wx.navigateTo(OBJECT)：保留当前页面，跳转到应用内的某个页面，使用wx.navigateBack可以返回到原页面,一个应用同时只能打开5个页面</li>\n<li>wx.redirectTo(OBJECT)：关闭当前页面，跳转到应用内的某个页面</li>\n<li>wx.navigateBack()：关闭当前页面，回退前一页面</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>视图层<ul>\n<li>条件渲染</li>\n<li>列表渲染</li>\n<li>模板</li>\n<li>事件</li>\n<li>引用</li>\n</ul>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj3652gfz00012hdhei64xzz6","category_id":"cj3652ggi00052hdhtsxagyb1","_id":"cj3652ggu00072hdhlao571sd"},{"post_id":"cj3652gga00032hdhqyi3to96","category_id":"cj3652ggi00052hdhtsxagyb1","_id":"cj3652ggv00082hdh4p6a4s51"}],"PostTag":[],"Tag":[]}}